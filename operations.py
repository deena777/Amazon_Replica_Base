import json
import string
import random
from json import JSONDecodeError

def Register(type,member_json_file,admin_json_file,Full_Name,Address,Email,Password):
    '''Register Function || Return True if registered successfully else False'''
    if type.lower()=='admin':
        f=open(admin_json_file,'r+')
        d={
            "Full Name":Full_Name,
            "Address":Address,
            "Email":Email,
            "Password":Password,
        }
        try:
            content=json.load(f)
            if d not in content:
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    elif type.lower()=='member':
        f=open(member_json_file,'r+')
        d={
            "Full Name":Full_Name,
            "Address":Address,
            "Email":Email,
            "Password":Password,
        }
        try:
            content=json.load(f)
            if d not in content:
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    else:
        return False

def Login(type,members_json_file,admin_json_file,Email,Password):
    '''Login Functionality || Return True if successfully logged in else False'''
    d=0
    if type.lower()=='admin':
        f=open(admin_json_file,'r+')
    else:
        f=open(members_json_file,'r+')
    try:
        content=json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Email"]==Email and content[i]["Password"]==Password:
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content,f)
    f.close()
    if d==0:
        return False
    return True

def AutoGenerate_ProductID():
    '''Return a autogenerated random product ID'''
    product_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=4))
    return product_ID

def AutoGenerate_OrderID():
    '''Return a autogenerated random product ID'''
    Order_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=3))
    return Order_ID

def Create_Product(owner, product_json_file, product_ID, product_name, manufacturer_name, price, discount, total_stock_available):
    '''Creating a product || Return True if successfully created else False'''
    product_data = {
        "Created By": owner,
        "Product ID": product_ID,
        "Product Name": product_name,
        "Manufacturer Name": manufacturer_name,
        "Price": price,
        "Discount": discount,
        "Total Stock Available": total_stock_available
    }
    try:
        with open(product_json_file, 'r') as file:
            products = json.load(file)
    except JSONDecodeError:
        products = []

    products.append(product_data)

    with open(product_json_file, 'w') as file:
        json.dump(products, file, indent=2)

    return True

def Read_Products(owner, product_json_file):
    '''Reading Products created by the admin(owner)'''
    try:
        with open(product_json_file, 'r') as file:
            products = json.load(file)
    except JSONDecodeError:
        products = []

    admin_products = [product for product in products if product["Created By"] == owner]
    return admin_products

def Read_Product_By_ID(product_json_file, product_ID, Details):
    '''Reading product by ID'''
    try:
        with open(product_json_file, 'r') as file:
            products = json.load(file)
    except JSONDecodeError:
        products = []

    for product in products:
        if product["Product ID"] == product_ID:
            Details.append(product)
            break

def Update_Product(product_json_file, product_ID, detail_to_be_updated, new_value):
    '''Updating Product || Return True if successfully updated else False'''
    try:
        with open(product_json_file, 'r') as file:
            products = json.load(file)
    except JSONDecodeError:
        products = []

    for product in products:
        if product["Product ID"] == product_ID:
            product[detail_to_be_updated] = new_value
            break

    with open(product_json_file, 'w') as file:
        json.dump(products, file, indent=2)

    return True

def Delete_Product(product_json_file, product_ID):
    '''Deleting Product || Return True if successfully deleted else False'''
    try:
        with open(product_json_file, 'r') as file:
            products = json.load(file)
    except JSONDecodeError:
        products = []

    for product in products:
        if product["Product ID"] == product_ID:
            products.remove(product)
            break

    with open(product_json_file, 'w') as file:
        json.dump(products, file, indent=2)

    return True

def Update_Member(member_json_file, name, detail_to_be_updated, new_value):
    '''Updating Member Details || Return True if successfully updated else False'''
    try:
        with open(member_json_file, 'r') as file:
            members = json.load(file)
    except JSONDecodeError:
        members = []

    for member in members:
        if member["Full Name"] == name:
            member[detail_to_be_updated] = new_value
            break

    with open(member_json_file, 'w') as file:
        json.dump(members, file, indent=2)

    return True

def Place_Order(order_json_file, ordered_by, delivery_address, product_json_file, product_ID, Quantity, Order_ID):
    '''Placing Order, Calculate the Price after discount and Total cost of the order || Return True if order placed successfully else False'''
    try:
        with open(product_json_file, 'r') as file:
            products = json.load(file)
    except JSONDecodeError:
        products = []

    for product in products:
        if product["Product ID"] == product_ID:
            price = product["Price"]
            discount = float(product["Discount"].strip('%'))
            price_after_discount = price * (1 - discount / 100)
            total_cost = price_after_discount * Quantity

            order_data = {
                "Order ID": Order_ID,
                "Product Name": product["Product Name"],
                "Price": price,
                "Discount": product["Discount"],
                "Price after Discount": price_after_discount,
                "Quantity": Quantity,
                "Total Cost": total_cost,
                "Ordered By": ordered_by,
                "Delivering to": delivery_address
            }

            try:
                with open(order_json_file, 'r') as order_file:
                    orders = json.load(order_file)
            except JSONDecodeError:
                orders = []

            orders.append(order_data)

            with open(order_json_file, 'w') as order_file:
                json.dump(orders, order_file, indent=2)

            return True

    return False

def Order_History(order_json_file, Name, details):
    '''Append the order information into details list'''
    try:
        with open(order_json_file, 'r') as file:
            orders = json.load(file)
    except JSONDecodeError:
        orders = []

    user_orders = [order for order in orders if order["Ordered By"] == Name]
    details.extend(user_orders)
